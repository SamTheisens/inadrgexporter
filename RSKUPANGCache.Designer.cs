//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace INADRGExporter {
    
    
    public partial class RSKUPANGCacheClientSyncProvider : Microsoft.Synchronization.Data.SqlServerCe.SqlCeClientSyncProvider {
        
        public RSKUPANGCacheClientSyncProvider() {
            this.ConnectionString = global::INADRGExporter.Properties.Settings.Default.ClientRSKUPANGConnectionString;
        }
        
        public RSKUPANGCacheClientSyncProvider(string connectionString) {
            this.ConnectionString = connectionString;
        }
    }
    
    public partial class RSKUPANGCacheSyncAgent : Microsoft.Synchronization.SyncAgent {
        
        private CUSTOMERSyncTable _cUSTOMERSyncTable;
        
        partial void OnInitialized();
        
        public RSKUPANGCacheSyncAgent() {
            this.InitializeSyncProviders();
            this.InitializeSyncTables();
            this.OnInitialized();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CUSTOMERSyncTable CUSTOMER {
            get {
                return this._cUSTOMERSyncTable;
            }
            set {
                this.Configuration.SyncTables.Remove(this._cUSTOMERSyncTable);
                this._cUSTOMERSyncTable = value;
                this.Configuration.SyncTables.Add(this._cUSTOMERSyncTable);
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeSyncProviders() {
            // Create SyncProviders.
            this.RemoteProvider = new RSKUPANGCacheServerSyncProvider();
            this.LocalProvider = new RSKUPANGCacheClientSyncProvider();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeSyncTables() {
            // Create SyncTables.
            this._cUSTOMERSyncTable = new CUSTOMERSyncTable();
            this._cUSTOMERSyncTable.SyncGroup = new Microsoft.Synchronization.Data.SyncGroup("CUSTOMERSyncTableSyncGroup");
            this.Configuration.SyncTables.Add(this._cUSTOMERSyncTable);
        }
        
        public partial class CUSTOMERSyncTable : Microsoft.Synchronization.Data.SyncTable {
            
            partial void OnInitialized();
            
            public CUSTOMERSyncTable() {
                this.InitializeTableOptions();
                this.OnInitialized();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitializeTableOptions() {
                this.TableName = "CUSTOMER";
                this.SyncDirection = Microsoft.Synchronization.Data.SyncDirection.Snapshot;
                this.CreationOption = Microsoft.Synchronization.Data.TableCreationOption.DropExistingOrCreateNewTable;
            }
        }
    }
}
namespace INADRGExporter {
    
    
    public partial class CUSTOMERSyncAdapter : Microsoft.Synchronization.Data.Server.SyncAdapter {
        
        partial void OnInitialized();
        
        public CUSTOMERSyncAdapter() {
            this.InitializeCommands();
            this.InitializeAdapterProperties();
            this.OnInitialized();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeCommands() {
            // CUSTOMERSyncTableInsertCommand command.
            this.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this.InsertCommand.CommandText = @"INSERT INTO dbo.CUSTOMER ([KD_CUSTOMER], [ACCOUNT], [CUSTOMER], [CONTACT], [ALAMAT], [KOTA], [TELEPON1], [TELEPON2], [FAX], [KD_POS], [NEGARA], [BEG_BAL], [CURRENTS], [CR_LIMIT], [FINANCE], [TERM]) VALUES (@KD_CUSTOMER, @ACCOUNT, @CUSTOMER, @CONTACT, @ALAMAT, @KOTA, @TELEPON1, @TELEPON2, @FAX, @KD_POS, @NEGARA, @BEG_BAL, @CURRENTS, @CR_LIMIT, @FINANCE, @TERM) SET @sync_row_count = @@rowcount";
            this.InsertCommand.CommandType = System.Data.CommandType.Text;
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@KD_CUSTOMER", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ACCOUNT", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CUSTOMER", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CONTACT", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ALAMAT", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@KOTA", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TELEPON1", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TELEPON2", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FAX", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@KD_POS", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NEGARA", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@BEG_BAL", System.Data.SqlDbType.Float));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CURRENTS", System.Data.SqlDbType.Float));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CR_LIMIT", System.Data.SqlDbType.Decimal));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FINANCE", System.Data.SqlDbType.Decimal));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TERM", System.Data.SqlDbType.Int));
            System.Data.SqlClient.SqlParameter insertcommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            insertcommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.InsertCommand.Parameters.Add(insertcommand_sync_row_countParameter);
            // CUSTOMERSyncTableDeleteCommand command.
            this.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this.DeleteCommand.CommandText = "DELETE FROM dbo.CUSTOMER WHERE ([KD_CUSTOMER] = @KD_CUSTOMER) SET @sync_row_count" +
                " = @@rowcount";
            this.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@KD_CUSTOMER", System.Data.SqlDbType.VarChar));
            System.Data.SqlClient.SqlParameter deletecommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            deletecommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.DeleteCommand.Parameters.Add(deletecommand_sync_row_countParameter);
            // CUSTOMERSyncTableUpdateCommand command.
            this.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this.UpdateCommand.CommandText = @"UPDATE dbo.CUSTOMER SET [ACCOUNT] = @ACCOUNT, [CUSTOMER] = @CUSTOMER, [CONTACT] = @CONTACT, [ALAMAT] = @ALAMAT, [KOTA] = @KOTA, [TELEPON1] = @TELEPON1, [TELEPON2] = @TELEPON2, [FAX] = @FAX, [KD_POS] = @KD_POS, [NEGARA] = @NEGARA, [BEG_BAL] = @BEG_BAL, [CURRENTS] = @CURRENTS, [CR_LIMIT] = @CR_LIMIT, [FINANCE] = @FINANCE, [TERM] = @TERM WHERE ([KD_CUSTOMER] = @KD_CUSTOMER) SET @sync_row_count = @@rowcount";
            this.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ACCOUNT", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CUSTOMER", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CONTACT", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ALAMAT", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@KOTA", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TELEPON1", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TELEPON2", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FAX", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@KD_POS", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NEGARA", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@BEG_BAL", System.Data.SqlDbType.Float));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CURRENTS", System.Data.SqlDbType.Float));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CR_LIMIT", System.Data.SqlDbType.Decimal));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FINANCE", System.Data.SqlDbType.Decimal));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TERM", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@KD_CUSTOMER", System.Data.SqlDbType.VarChar));
            System.Data.SqlClient.SqlParameter updatecommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            updatecommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.UpdateCommand.Parameters.Add(updatecommand_sync_row_countParameter);
            // selectIncrementalInsertsCommand command.
            this.SelectIncrementalInsertsCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectIncrementalInsertsCommand.CommandText = "SELECT * FROM dbo.CUSTOMER";
            this.SelectIncrementalInsertsCommand.CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeAdapterProperties() {
            this.TableName = "CUSTOMER";
        }
    }
    
    public partial class RSKUPANGCacheServerSyncProvider : Microsoft.Synchronization.Data.Server.DbServerSyncProvider {
        
        private CUSTOMERSyncAdapter _cUSTOMERSyncAdapter;
        
        partial void OnInitialized();
        
        public RSKUPANGCacheServerSyncProvider() {
            string connectionString = global::INADRGExporter.Properties.Settings.Default.RSKUPANGConnectionString;
            this.InitializeConnection(connectionString);
            this.InitializeSyncAdapters();
            this.InitializeNewAnchorCommand();
            this.OnInitialized();
        }
        
        public RSKUPANGCacheServerSyncProvider(string connectionString) {
            this.InitializeConnection(connectionString);
            this.InitializeSyncAdapters();
            this.InitializeNewAnchorCommand();
            this.OnInitialized();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CUSTOMERSyncAdapter CUSTOMERSyncAdapter {
            get {
                return this._cUSTOMERSyncAdapter;
            }
            set {
                this._cUSTOMERSyncAdapter = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeConnection(string connectionString) {
            this.Connection = new System.Data.SqlClient.SqlConnection(connectionString);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeSyncAdapters() {
            // Create SyncAdapters.
            this._cUSTOMERSyncAdapter = new CUSTOMERSyncAdapter();
            this.SyncAdapters.Add(this._cUSTOMERSyncAdapter);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeNewAnchorCommand() {
            // selectNewAnchorCmd command.
            this.SelectNewAnchorCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectNewAnchorCommand.CommandText = "Select @sync_new_received_anchor = GETUTCDATE()";
            this.SelectNewAnchorCommand.CommandType = System.Data.CommandType.Text;
            System.Data.SqlClient.SqlParameter selectnewanchorcommand_sync_new_received_anchorParameter = new System.Data.SqlClient.SqlParameter("@sync_new_received_anchor", System.Data.SqlDbType.DateTime);
            selectnewanchorcommand_sync_new_received_anchorParameter.Direction = System.Data.ParameterDirection.Output;
            this.SelectNewAnchorCommand.Parameters.Add(selectnewanchorcommand_sync_new_received_anchorParameter);
        }
    }
}
